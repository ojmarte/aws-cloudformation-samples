AWSTemplateFormatVersion: '2010-09-09'
Description: Simple Data Lake Setup with Parameters

Parameters:
  pOrg:
    Description: Name of the organization owning the data lake
    Type: String
    Default: "default-org"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "default-domain"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "dev"
  pLandingBucket:
    Description: Name of the existing landing bucket
    Type: String

Resources:
  rLandingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-landing-bucket"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt rLambdaCrawlerFunction.Arn

  rProcessedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-processed-bucket"

  rLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - glue:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource: "*"
  
  rLambdaCrawlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-glue-crawler-trigger"
      Role: !GetAtt rLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub "${pOrg}-${pDomain}-${pEnvironment}-lambda-glue-bucket"
        S3Key: 'lambda/glue-crawler-trigger/src/lambda_function.zip'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          pOrg: !Ref pOrg
          pDomain: !Ref pDomain
          pEnvironment: !Ref pEnvironment

  rLambdaJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-glue-job-trigger"
      Role: !GetAtt rLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub "${pOrg}-${pDomain}-${pEnvironment}-lambda-glue-bucket"
        S3Key: 'lambda/glue-job-trigger/src/lambda_function.zip'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          pOrg: !Ref pOrg
          pDomain: !Ref pDomain
          pEnvironment: !Ref pEnvironment

  rLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rLambdaCrawlerFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com

  LambdaJobInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rLambdaJobFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt GlueDatabaseStateChangeEventRule.Arn

  rLandingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rLandingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: s3:*
            Resource: 
              - !Sub "arn:aws:s3:::${pOrg}-${pDomain}-${pEnvironment}-landing-bucket"
              - !Sub "arn:aws:s3:::${pOrg}-${pDomain}-${pEnvironment}-landing-bucket/*"

  rGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-GlueCrawler"
      Role: !GetAtt rGlueServiceRole.Arn
      DatabaseName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-database"
      Targets:
        S3Targets:
          - Path: !Sub "s3://${rLandingBucket}"
      Configuration: !Sub |
        {
          "Version": 1.0,
          "CrawlerOutput": {
            "Partitions": {
              "AddOrUpdateBehavior": "InheritFromTable"
            }
          }
        }

  GlueDatabaseStateChangeEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-GlueDatabaseStateChangeEventRule"
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "Glue Data Catalog Database State Change"
        detail:
          databaseName:
            - !Sub "${pOrg}-${pDomain}-${pEnvironment}-database"
          typeOfChange:
            - "CreateTable"
            - "UpdateTable"
      Targets:
        - Arn: !GetAtt rLambdaJobFunction.Arn
          Id: "MyLambdaGlueDatabaseStateChangeTarget"

  rGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-GlueJob"
      Role: !GetAtt rGlueServiceRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub 's3://${pOrg}-${pDomain}-${pEnvironment}-lambda-glue-bucket/glue/script/src/glue_job.py'
        PythonVersion: '3'
      DefaultArguments:
        "--enable-continuous-log-filter": "true"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-metrics": "true"
        "--continuous-log-logStreamPrefix": "glue-etl-success-"
        "--JOB_NAME": !Sub "${pOrg}-${pDomain}-${pEnvironment}-GlueJob"
        "--LANDING_BUCKET": !Sub 's3://${pOrg}-${pDomain}-${pEnvironment}-landing-bucket'
        "--PROCESSED_BUCKET": !Sub 's3://${pOrg}-${pDomain}-${pEnvironment}-processed-bucket'
        "--DATABASE": !Sub "${pOrg}-${pDomain}-${pEnvironment}-database"
      MaxRetries: 1
      Timeout: 2880

  rGlueServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: glue-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - glue:*
                Resource: "*"

Outputs:
  oGlueCrawlerName:
    Description: "Name of the Glue crawler"
    Value: !Ref rGlueCrawler
  oGlueJobName:
    Description: "Name of the Glue job"
    Value: !Ref rGlueJob
  oLandingBucketName:
    Value: !Ref rLandingBucket
    Description: "Name of the S3 bucket for landing data"
  oProcessedBucketName:
    Value: !Ref rProcessedBucket
    Description: "Name of the S3 bucket for processed data"
