AWSTemplateFormatVersion: '2010-09-09'
Description: Monitoring stack for serverless data lake

Parameters:
  pOrg:
    Description: Name of the organization owning the data lake
    Type: String
    Default: "default-org"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "default-domain"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "dev"
  pTeamsWebhookURL:
    Description: Microsoft Teams Webhook URL for notifications
    Type: String
    Default: "https://outlook.office.com/webhook/YOUR/TEAMS/WEBHOOK"

Resources:
  rDataLakeMonitoringBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitoring-bucket"

  rMonitorSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitoring-secret"
      SecretString: !Sub |
        {
          "teams_webhook_url": "${pTeamsWebhookURL}"
        }

  rMonitorTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-topic"

  rMonitorTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Action: 'sns:Publish'
            Resource: !Ref rMonitorTopic
      Topics:
        - !Ref rMonitorTopic

  rMonitorTopicSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: 'lambda'
      TopicArn: !Ref rMonitorTopic
      Endpoint: !GetAtt rMonitorEventSubscriber.Arn

  rPermissionForSNS:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref rMonitorEventSubscriber
      Action: 'lambda:InvokeFunction'
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref rMonitorTopic

  rMonitorLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'MonitorLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource: !Ref rMonitorTopic
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject*'
                  - 's3:Abort*'
                  - 's3:DeleteObject*'
                  - 's3:GetObject*'
                  - 's3:GetBucket*'
                  - 's3:List*'
                  - 's3:Head*'
                Resource: !Sub "arn:aws:s3:::${rDataLakeMonitoringBucket}/*"

  rRequestsLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-requests-layer"
      Description: Layer for requests library
      Content:
        S3Bucket: !Sub "${pOrg}-${pDomain}-${pEnvironment}-lambda-glue-bucket"
        S3Key: "layer/monitor-event-subscriber/src/layer.zip"
      CompatibleRuntimes:
        - python3.12

  rMonitorEventSubscriber:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: !Sub "Monitors events and sends notifications to Microsoft Teams"
      FunctionName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-event-subscriber"
      MemorySize: 128
      Role: !GetAtt rMonitorLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          TEAMS_WEBHOOK_URL: !Ref pTeamsWebhookURL
          MONITOR_S3: !Ref rDataLakeMonitoringBucket
          MONITOR_DATABASE: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-db"
          MONITOR_TABLE: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-table"
      Code: 
        S3Bucket: !Sub "${pOrg}-${pDomain}-${pEnvironment}-lambda-glue-bucket"
        S3Key: 'lambda/monitor-event-subscriber/src/lambda_function.zip'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref rRequestsLayer

  rEventBridgeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EventBridgePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource: !Ref rMonitorTopic

  rEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-capture-state-changes"
      RoleArn: !GetAtt rEventBridgeRole.Arn
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "Glue Job State Change"
          - "Glue Crawler State Change"
        detail:
          state:
            - "TIMEOUT"
            - "FAILED"
            - "SUCCEEDED"
            - "STOPPED"
            - "Failed"
            - "Succeeded"
      Targets:
        - Arn: !Ref rMonitorTopic
          Id: "GlueLogsTarget"

  
  rMonitorDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-db"
        Description: "Monitoring DB for logging Glue job and crawler events"
        # LocationUri: !Sub "s3://${rDataLakeMonitoringBucket}/"

  rMonitorTable:
    Type: 'AWS::Glue::Table'
    Properties:
      DatabaseName: !Ref rMonitorDatabase
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-table"
        Description: "Table for monitoring logs"
        StorageDescriptor:
          Columns:
            - Name: "state"
              Type: "string"
              Comment: "State of the Glue job or crawler"
            - Name: "job_name"
              Type: "string"
              Comment: "Name of the Glue job"
            - Name: "crawler_name"
              Type: "string"
              Comment: "Name of the Glue crawler"
            - Name: "timestamp"
              Type: "string"
              Comment: "Timestamp of the event"
            - Name: "message"
              Type: "string"
              Comment: "Log message"
          Location: !Sub "s3://${rDataLakeMonitoringBucket}/my-org-devops-dev-monitor-db/my-org-devops-dev-monitor-table/"
          InputFormat: "org.apache.hadoop.mapred.TextInputFormat"
          OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"
          Compressed: false
          SerdeInfo:
            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
            Parameters:
              paths: "state,job_name,crawler_name,timestamp,message"
        TableType: "EXTERNAL_TABLE"
        Parameters:
          EXTERNAL: "TRUE"
          classification: "json"
          has_encrypted_data: "false"

Outputs:
  oMonitoringBucketName:
    Description: Name of the S3 bucket used for monitoring data
    Value: !Ref rDataLakeMonitoringBucket
  oMonitorLambdaFunction:
    Description: ARN of the Lambda function for monitoring event processing
    Value: !GetAtt rMonitorEventSubscriber.Arn
  oAthenaDatabaseName:
    Description: Name of the Athena database used for monitoring logs
    Value: !Ref rMonitorDatabase
  oAthenaTableName:
    Description: Name of the Athena table used for monitoring logs
    Value: !Ref rMonitorTable
