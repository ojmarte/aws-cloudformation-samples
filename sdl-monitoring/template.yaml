AWSTemplateFormatVersion: '2010-09-09'
Description: Monitoring stack for serverless data lake

Parameters:
  pPipelineReference:
    Description: Reference for the pipeline
    Type: String
    Default: none
  pOrg:
    Description: Name of the organization owning the data lake
    Type: String
    Default: "default-org"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "default-domain"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "dev"
  pCloudWatchLogsRetentionInDays:
    Description: Number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 7
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
  pGlueJobLogGroupName:
    Description: Name of the CloudWatch log group for Glue jobs
    Type: String
  pGlueCrawlerLogGroupName:
    Description: Name of the CloudWatch log group for Glue crawlers
    Type: String
  pTeamsWebhookURL:
    Description: Microsoft Teams Webhook URL for notifications
    Type: String
    Default: "https://outlook.office.com/webhook/YOUR/TEAMS/WEBHOOK"

Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler

Resources:
  # S3 Bucket for Monitoring
  rDataLakeMonitoringBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitoring-bucket"

  # Secret for Monitoring
  rMonitorSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitoring-secret"
      SecretString: !Sub |
        {
          "teams_webhook_url": "${pTeamsWebhookURL}"
        }

  # SNS Topic
  rMonitorTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-topic"

  # IAM Role for Lambda
  rMonitorLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'MonitorLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource: !Ref MonitorTopic
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject*'
                  - 's3:Abort*'
                  - 's3:DeleteObject*'
                  - 's3:GetObject*'
                  - 's3:GetBucket*'
                  - 's3:List*'
                  - 's3:Head*'
                Resource: !Sub "arn:aws:s3:::${DataLakeMonitoringBucket}/*"
              - Effect: 'Allow'
                Action:
                  - 'glue:CreateTable'
                  - 'glue:DeleteTable'
                  - 'glue:UpdateTable'
                  - 'glue:GetDatabases'
                  - 'glue:GetSchema'
                  - 'glue:GetTable'
                  - 'glue:CreatePartition'
                  - 'glue:UpdatePartition'
                  - 'glue:DeletePartition'
                  - 'glue:BatchCreatePartition'
                  - 'glue:Get*'
                  - 'glue:BatchGet*'
                Resource: '*'

  # Lambda Function for Monitoring Events
  rMonitorEventSubscriber:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: !Sub "Monitors events and sends notifications to Microsoft Teams"
      FunctionName: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-event-subscriber"
      MemorySize: 128
      Role: !GetAtt MonitorLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          TEAMS_WEBHOOK_URL: !Ref MonitorSecret
          REGION: !Ref "AWS::Region"
          MONITOR_S3: !Ref DataLakeMonitoringBucket
          MONITOR_DATABASE: !Ref MonitorDatabase
          MONITOR_TABLE: !Ref MonitorTable
      CodeUri: ./lambda/monitor-event-subscriber/src

  # Permission for EventBridge to invoke Lambda
  rPermissionForEventBridgeToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref MonitorEventSubscriber
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventBridgeRule.Arn

  # EventBridge Rule to capture state changes
  rEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-capture-state-changes"
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "Glue Job State Change"
          - "Glue Crawler State Change"
        detail:
          state:
            - "TIMEOUT"
            - "FAILED"
            - "SUCCEEDED"
            - "STOPPED"
            - "Failed"
            - "Succeeded"
      Targets:
        - Arn: !Ref MonitorTopic
          Id: "GlueLogsTarget"

  # CloudWatch Log Subscription Filter for Glue Jobs
  rGlueJobLogSubscriptionFilter:
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt EventBridgeRule.Arn
      FilterPattern: '{ $.detail.state = "TIMEOUT" || $.detail.state = "FAILED" || $.detail.state = "SUCCEEDED" || $.detail.state = "STOPPED" || $.detail.state = "Failed" || $.detail.state = "Succeeded" }'
      LogGroupName: !Ref pGlueJobLogGroupName

  # CloudWatch Log Subscription Filter for Glue Crawlers
  rGlueCrawlerLogSubscriptionFilter:
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt EventBridgeRule.Arn
      FilterPattern: '{ $.detail.state = "TIMEOUT" || $.detail.state = "FAILED" || $.detail.state = "SUCCEEDED" || $.detail.state = "STOPPED" || $.detail.state = "Failed" || $.detail.state = "Succeeded" }'
      LogGroupName: !Ref pGlueCrawlerLogGroupName
  
  # Athena Database
  rMonitorDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-db"
        Description: "Monitoring DB"
        LocationUri: !Sub "s3://${DataLakeMonitoringBucket}/${pOrg}-${pDomain}-${pEnvironment}-monitor-db/"

  # Athena Table for Monitoring
  rMonitorTable:
    Type: 'AWS::Glue::Table'
    Properties:
      DatabaseName: !Ref MonitorDatabase
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: !Sub "${pOrg}-${pDomain}-${pEnvironment}-monitor-table"
        Description: "Monitor Table Attributes"
        Parameters:
          classification: "json"
          has_encrypted_data: "false"
          projection.enabled: "true"
          projection.exported_on.type: "date"
          projection.exported_on.range: "2021-07-01,2021-12-31"
          projection.exported_on.format: "yyyy-MM-dd"
          projection.exported_on.interval: "1"
          projection.exported_on.interval.unit: "DAYS"
        PartitionKeys:
          - Name: "exported_on"
            Type: "date"
            Comment: "Day of event"
        StorageDescriptor:
          Columns:
            - Name: "error_message"
              Type: "string"
              Comment: ""
            - Name: "event_type"
              Type: "string"
              Comment: ""
            - Name: "exception_details"
              Type: "string"
              Comment: ""
            - Name: "retry_attempts"
              Type: "string"
              Comment: ""
            - Name: "service_name"
              Type: "string"
              Comment: ""
            - Name: "service_request_id"
              Type: "string"
              Comment: ""
            - Name: "service_type"
              Type: "string"
              Comment: ""
            - Name: "timestamp"
              Type: "string"
              Comment: ""
          InputFormat: "org.apache.hadoop.mapred.TextInputFormat"
          OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"
          Compressed: true
          Location: !Sub "s3://${DataLakeMonitoringBucket}/${pOrg}-${pDomain}-${pEnvironment}-monitor-db/${pOrg}-${pDomain}-${pEnvironment}-monitor-table/"
          SerdeInfo:
            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
        TableType: "EXTERNAL_TABLE"

Outputs:
  oMonitoringBucketName:
    Description: Name of the S3 bucket used for monitoring data
    Value: !Ref DataLakeMonitoringBucket
  oMonitorSNSTopic:
    Description: ARN of the SNS topic for monitoring events
    Value: !Ref MonitorTopic
  oMonitorLambdaFunction:
    Description: ARN of the Lambda function for monitoring event processing
    Value: !GetAtt MonitorEventSubscriber.Arn
